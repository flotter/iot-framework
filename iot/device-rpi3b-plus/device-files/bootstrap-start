#!/bin/bash

ENC_HDR=/dev/mmcblk0p3
ENC_PART=/dev/mmcblk0p4

BOOT_DIR=/boot/firmware/iot
ENCRYPT_FLAG=$BOOT_DIR/payload-encrypted.flag
FORMAT_FLAG=$BOOT_DIR/payload-formatted.flag

SERIAL=$(cat /proc/cpuinfo | grep Serial | sed -n 's/^[^:]*:\(.*\)/\1/p' | xargs)

KEYFILE=/run/keyfile
ENC_NAME=enc
ENC_PATH=/home/iot/$ENC_NAME
ENC_PAYLOAD=/home/iot/payload

# Wait for cloud init

echo "Cloud Init Busy - Waiting before bootstrap ..."
cloud-init status --wait
echo "Cloud Init Complete - Bootstrap Next"

# Generate a device specific secret key
/bin/xkey

# Make sure these directories exist
/bin/mkdir -p $BOOT_DIR
/bin/mkdir -p $ENC_PATH

# Format the payload partition
if [ ! -f $FORMAT_FLAG ]; then

	echo "No payload-formatted.flag : Formatting payload partition"

	# Format to EXT4
	/usr/sbin/mkfs.ext4 -F $ENC_PART

	# Make sure encryption is redone
	rm -rf $ENCRYPT_FLAG

fi

# Encrypt the payload partition, but only the first time
if [ ! -f $ENCRYPT_FLAG ]; then

	echo "No payload-encrypted.flag : Encrypting existing data in partition"
	cat $KEYFILE | /usr/sbin/cryptsetup-reencrypt --new --header=$ENC_HDR --type=luks2 -c xchacha12,aes-adiantum-plain64 -s 256 -h sha512 --use-urandom $ENC_PART
	cat $KEYFILE | /usr/sbin/cryptsetup luksAddKey --header=$ENC_HDR $ENC_PART $KEYFILE
fi

# Open the encrypted partition
echo "Open encrypted drive"
/usr/sbin/cryptsetup luksOpen --header=$ENC_HDR $ENC_PART $ENC_NAME --key-file=$KEYFILE

echo "Encrypted drive Check ..."
if [ -e /dev/mapper/$ENC_NAME ]; then
	echo "Encrypted drive OK"
else
	echo "Failed to open encrypted drive, formatting ..."
	rm -f $ENCRYPT_FLAG
	rm -f $FORMAT_FLAG
	reboot
fi

echo "Running disk check"
/usr/sbin/e2fsck -p /dev/mapper/$ENC_NAME

echo "Mounting"
/usr/bin/mount /dev/mapper/$ENC_NAME $ENC_PATH
RET=$?
if [ $RET -ne 0 ]; then
	echo "Failed to mount encrypted drive, formatting ..."
	rm -f $ENCRYPT_FLAG
	rm -f $FORMAT_FLAG 
	reboot
fi

# If we got here, all is well
/usr/bin/touch $FORMAT_FLAG
/usr/bin/touch $ENCRYPT_FLAG

# Setup payload directory structure
mkdir -p $ENC_PATH/live
mkdir -p $ENC_PATH/update
ln -snf $ENC_PATH/live $ENC_PAYLOAD

# Let's make sure the iot user has access
chown -R iot:iot /home/iot
chown -R iot:iot /home/iot/live
chown -R iot:iot /home/iot/update

# During commissioning, unencrypted data is inserted
# If we detect it, encrypt and remove unencrypted copy.
if [ -d $BOOT_DIR/commission ]; then
	# Folder will overwrite previous encrypted version
	rm -rf $BOOT_DIR/commission.tar.gz.enc

	# Encrypt commissioning info
	cd $BOOT_DIR
	tar -cz commission | openssl enc -aes-256-cbc -pbkdf2 -e -k "$(cat $KEYFILE)" > commission.tar.gz.enc
	rm -rf $BOOT_DIR/commission
fi

# Make commissioning data available under /run
if [ -f $BOOT_DIR/commission.tar.gz.enc ]; then
	rm -rf /run/commission
	cat $BOOT_DIR/commission.tar.gz.enc | openssl enc -aes-256-cbc -pbkdf2 -d -k "$(cat $KEYFILE)" | tar xz -C /run
fi

# Create payload access to some information
if [ -d /run/commission ]; then
        mkdir -p /run/payload-runtime
        echo "$SERIAL" > /run/payload-runtime/serial.cfg
        echo "$(cat /run/commission/cust.cfg)" > /run/payload-runtime/cust.cfg
        echo "$(cat /run/commission/site.cfg)" > /run/payload-runtime/site.cfg

fi

# Make settings data available under /run
# (Settings are not encrypted)
if [ -d $BOOT_DIR/settings ]; then
	cp -Rf $BOOT_DIR/settings /run
fi

# Did WIFI init OK?
if [ -e /sys/class/net/wlan0 ]; then
	echo "WIFI HW Initialized OK."
else
        echo "WIFI HW Initialization FAILED."

	WIFI_RETRY=5
	COUNT=0
	while [ $COUNT -lt $WIFI_RETRY ]; do

		echo "Unloading brcmfmac module"
		modprobe -r brcmfmac
		sleep 5
		echo "Loading brcmfmac module"
		modprobe brcmfmac
		sleep 5

		if [ -e /sys/class/net/wlan0 ]; then

			echo "WIFI HW Initialized OK."
			break
		fi

		COUNT=$((COUNT + 1))
	done
fi

# Install WIFI hotspots
if [ -f /run/settings/networking.cfg ]; then
	echo "Copying WIFI settings for Netplan"
	cp -f /run/settings/networking.cfg /etc/netplan/config.yaml
fi

echo "Apply WIFI settings for Netplan"
netplan generate
netplan apply

# Cleanup
rm -rf /run/commission
rm -rf $KEYFILE


