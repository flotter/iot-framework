#!/bin/bash

SERIAL=$(cat /proc/cpuinfo | grep Serial | sed -n 's/^[^:]*:\(.*\)/\1/p' | xargs)
HOME_DIR=/home/iot
KEYFILE=/run/keyfile
BOOT_DIR=/boot/firmware/iot
UPDATE_LOOP_RATE=300

# The last time the update checker issued a reboot to
# start the update process
LAST_REBOOT_UTC_FILE=$HOME_DIR/firmware-last-reboot.cfg
REBOOT_COUNT_FILE=$HOME_DIR/firmware-reboots.cfg

FW_PROD=$HOME_DIR/firmware-production.cfg
FW_VER=$HOME_DIR/firmware-version.cfg
FW_DATE=$HOME_DIR/firmware-date.cfg

# Settings controlling update behaviour
UPDATE_SETTINGS=/run/settings/update.cfg

# When does the update window open
UPDATE_START=$(cat $UPDATE_SETTINGS | grep update-time-start | sed -n 's/[^=]*=\(.*\)/\1/p')
if [ "x$UPDATE_START" == "x" ]; then
	UPDATE_START="02:00"
fi

# When does the update window close
UPDATE_END=$(cat $UPDATE_SETTINGS | grep update-time-end | sed -n 's/[^=]*=\(.*\)/\1/p')
if [ "x$UPDATE_END" == "x" ]; then
	UPDATE_END="06:00"
fi

# How many days to skip before looking for an update again
UPDATE_SKIP_DAYS=$(cat $UPDATE_SETTINGS | grep update-time-skip-days | sed -n 's/[^=]*=\(.*\)/\1/p')
if [ "x$UPDATE_SKIP_DAYS" == "x" ]; then
	UPDATE_SKIP_DAYS=0
fi

# Instant updates (debug feature)
LIVE_CHECK=$(cat $UPDATE_SETTINGS | grep update-live | sed -n 's/[^=]*=\(.*\)/\1/p')
if [ "x$LIVE_CHECK" == "x" ]; then
	LIVE_CHECK=no
fi

# How often the unit publish a heartbeat
HEARTBEAT_RATE=$(cat $UPDATE_SETTINGS | grep heartbeat-rate | sed -n 's/[^=]*=\(.*\)/\1/p')
if [ "x$HEARTBEAT_RATE" == "x" ]; then
	HEARTBEAT_RATE=300
fi

# The last reboot is now, we just started this script
LAST_REBOOT_UTC=$(date +%s)
echo "$(date --utc)" > $LAST_REBOOT_UTC_FILE

# We will send a heartbeat on startup, so also now
LAST_HEARTBEAT_UTC=$LAST_REBOOT_UTC

while [ true ]; do

	# Key generation
	/bin/xkey

	# Make commissioning data available under /run
	if [ -f $BOOT_DIR/commission.tar.gz.enc ]; then
		rm -rf /run/commission
		cat $BOOT_DIR/commission.tar.gz.enc | openssl enc -aes-256-cbc -pbkdf2 -d -k "$(cat $KEYFILE)" | tar xz -C /run
	fi

	# We only work in UTC time
	UPDATE_START_UTC=$(date --date="$UPDATE_START" +%s)
	UPDATE_END_UTC=$(date --date="$UPDATE_END" +%s)
	TIME_NOW_UTC=$(date +%s)

	echo "Settings: update-time-start=$UPDATE_START, update-time-end=$UPDATE_END, update-skip-days=$UPDATE_SKIP_DAYS, update-live=$LIVE_CHECK"

	# When last did we attempt an update?
	SKIP_DAYS=$((($TIME_NOW_UTC - $LAST_REBOOT_UTC) / 86400))

	echo "Update skipped $SKIP_DAYS days."

	# Normal update inside update window
	UPDATE_WINDOW_ACTIVE=0

	if [ $UPDATE_START_UTC -lt $TIME_NOW_UTC ] && [ $UPDATE_END_UTC -gt $TIME_NOW_UTC ] && [ $SKIP_DAYS -ge $UPDATE_SKIP_DAYS ]; then
		echo "We are inside the update window ..."
		UPDATE_WINDOW_ACTIVE=1
	fi

	# If the device has not recently rebooted, we want to do so in the next
	# valid update window, even if no updates are available. We want to
	# publish device logs.	
	SCHEDULE_DEVICE_LOGS_UPDATE=0

	if [ $UPDATE_START_UTC -gt $LAST_REBOOT_UTC ] || [ $UPDATE_END_UTC -lt $LAST_REBOOT_UTC ]; then
		echo "Scheduling reboot for logs publishing ..."
		SCHEDULE_DEVICE_LOGS_UPDATE=1
	fi

	if [ "x$UPDATE_WINDOW_ACTIVE" == "x1" ] || [ "x$LIVE_CHECK" == "xyes" ]; then


		# Green LED Update Check
		/bin/led-control led0 flash 10

		# Settings
		SETTINGS_VERSION_DEVICE=$(/bin/offline-settings-version)
		SETTINGS_VERSION_CLOUD=$(/bin/online-settings-version)
		SETTINGS_UPDATE=0
		if [ "x$SETTINGS_VERSION_DEVICE" != "x$SETTINGS_VERSION_CLOUD" ]; then
			echo "New settings update available (Device: $SETTINGS_VERSION_DEVICE, Cloud: $SETTINGS_VERSION_CLOUD)"
			SETTINGS_UPDATE=1
		else
			echo "No settings update available (Device: $SETTINGS_VERSION_DEVICE, Cloud: $SETTINGS_VERSION_CLOUD)"
		fi
		
		# Payload
		PAYLOAD_VERSION_DEVICE=$(/bin/offline-payload-version)
		PAYLOAD_VERSION_CLOUD=$(/bin/online-payload-version)
		PAYLOAD_UPDATE=0
		if [ "x$PAYLOAD_VERSION_DEVICE" != "x$PAYLOAD_VERSION_CLOUD" ]; then
			echo "New payload update available (Device: $PAYLOAD_VERSION_DEVICE, Cloud: $PAYLOAD_VERSION_CLOUD)"
			PAYLOAD_UPDATE=1
		else
			echo "No payload update available (Device: $PAYLOAD_VERSION_DEVICE, Cloud: $PAYLOAD_VERSION_CLOUD)"
		fi

		# Logs
		LOGS_UPDATE=0
		if [ "x$UPDATE_WINDOW_ACTIVE" == "x1" ] && [ "x$SCHEDULE_DEVICE_LOGS_UPDATE" == "x1" ]; then
			echo "Logs getting published on reboot ..."
			LOGS_UPDATE=1
		fi

		if [ $SETTINGS_UPDATE -eq 1 ] || [ $PAYLOAD_UPDATE -eq 1 ] || [ $LOGS_UPDATE -eq 1 ]; then
			echo "Rebooting ..."
			sync
			reboot
		fi

	else
		echo "Update window not ready: Now=$TIME_NOW_UTC, Start=$UPDATE_START_UTC, End=$UPDATE_END_UTC"
	fi

	# Update Green LED state
	wget -q --spider http://google.com
	RET=$?
	if [ $RET -eq 0 ]; then
		# Green LED Online
		/bin/led-control led0 flash 1
	else
		# Green LED Offline
		/bin/led-control led0 off
	fi

	# Is heartbeat disabled?
	if [ $HEARTBEAT_RATE -ne 0 ]; then

		# Heartbeat is mostly a debug feature, but it provides live device health
		# information without needing a reboot to publish logs.
		BEAT_DELTA=$((TIME_NOW_UTC - LAST_HEARTBEAT_UTC))
		if [ $BEAT_DELTA -gt $HEARTBEAT_RATE ] || [ $LAST_HEARTBEAT_UTC -eq $LAST_REBOOT_UTC ]; then
	
			# Delay after reboot so we capture actual state
			if [ $LAST_HEARTBEAT_UTC -eq $LAST_REBOOT_UTC ]; then
				echo "Sleeping 60 seconds after reboot before updating heartbeat..."
				sleep 60
			fi
			
			LAST_HEARTBEAT_UTC=$(date +%s)
	
			echo "Internet Check"
	
			ONLINE=0		
			wget -q --spider http://google.com
			RET=$?
			if [ $RET -eq 0 ]; then
				ONLINE=1
			fi
			
			if [ $ONLINE -eq 1 ] && [ -f /run/commission/s3cfg-upload.cfg ] && [ -f /run/commission/cust.cfg ] && [ -f /run/commission/site.cfg ]; then
	
				# Clear heartbeat file
				cat /dev/null > /run/heartbeat.cfg
	
				echo "timestamp=$(date --utc)" >> /run/heartbeat.cfg
				echo "settings-online-version=$(/bin/online-settings-version)" >> /run/heartbeat.cfg
				echo "settings-offline-version=$(/bin/offline-settings-version)" >> /run/heartbeat.cfg
				echo "payload-online-version=$(/bin/online-payload-version)" >> /run/heartbeat.cfg
				echo "payload-offline-version=$(/bin/offline-payload-version)" >> /run/heartbeat.cfg
				echo "power-state=$(vcgencmd get_throttled | cut -d'=' -f2)" >> /run/heartbeat.cfg
				echo "last-reboot=$(cat $LAST_REBOOT_UTC_FILE)" >> /run/heartbeat.cfg
				echo "reboots=$(cat $REBOOT_COUNT_FILE)" >> /run/heartbeat.cfg
				echo "firmware-version=$(cat $FW_VER)" >> /run/heartbeat.cfg
				echo "firmware-production=$(cat $FW_PROD)" >> /run/heartbeat.cfg
				echo "firmware-date=$(cat $FW_DATE)" >> /run/heartbeat.cfg			
	
				# Upload the heartbeat
				s3cmd -q -f --config /run/commission/s3cfg-upload.cfg put --no-preserve /run/heartbeat.cfg s3://iot-device-upload/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/$SERIAL-heartbeat-info.txt
	
				journalctl -u payload -a -n 50 > /run/payload.cfg
	
				# Upload a payload log snippet			
				s3cmd -q -f --config /run/commission/s3cfg-upload.cfg put --no-preserve /run/payload.cfg s3://iot-device-upload/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/$SERIAL-heartbeat-payload.txt
				echo "Heartbeat published"
			else
				echo "Not ready to update heartbeat internet is offline"
			fi		
		else
			echo "Not ready to update heartbeat (Delta: $BEAT_DELTA, Rate: $HEARTBEAT_RATE)"
		fi
	fi

	# Cleanup
	rm -rf /run/commission
	rm -rf $KEYFILE
	
	# This controls how fast live update can react
	if [ "x$LIVE_CHECK" == "xyes" ]; then
		sleep 30
	else
		sleep $UPDATE_LOOP_RATE
	fi
done

