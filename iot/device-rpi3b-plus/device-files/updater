#!/bin/bash

KEYFILE=/run/keyfile
BOOT_DIR=/boot/firmware/iot
SERIAL=$(cat /proc/cpuinfo | grep Serial | sed -n 's/^[^:]*:\(.*\)/\1/p' | xargs)

HOME_DIR=/home/iot
REBOOT_COUNT_FILE=$HOME_DIR/firmware-reboots.cfg
ENC_DRIVE=$HOME_DIR/enc

update_log_clear() {
	cat /dev/null > /run/update-progress.cfg
}

update_log_publish() {	
	echo "$(date --utc): $1" >> /run/update-progress.cfg
	s3cmd -q -f --config /run/commission/s3cfg-upload.cfg put --no-preserve /run/update-progress.cfg s3://iot-device-upload/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/$SERIAL-update-info.txt
}

upload_file() {	
	RETRY=0
	RETRY_MAX=10

	while [ $RETRY -lt $RETRY_MAX ]; do
		RETRY=$((RETRY + 1))
		echo "Upload attempt $RETRY for $(basename $1)"
	
		s3cmd -q -f --config /run/commission/s3cfg-upload.cfg put --no-preserve "$1" s3://iot-device-upload/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/$(basename "$1")
		RET=$?

		if [ $RET -ne 0 ]; then
			echo "Update attempt returned (Ret: $RET)"
		else
			break
		fi
	done

	if [ $RET -ne 0 ]; then
		echo "Upload attempts for $(basename $1) failed."
	fi
}

update_payload() {	

	mkdir -p $ENC_DRIVE/update
	mkdir -p $ENC_DRIVE/live

	RETRY=0
	RETRY_MAX=10

	while [ $RETRY -lt $RETRY_MAX ]; do
		RETRY=$((RETRY + 1))
		echo "Sync attempt $RETRY for payload"
	
		s3cmd -v --config /run/commission/s3cfg-download.cfg --no-check-md5 sync --no-preserve --delete-removed s3://iot-device-download/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/payload/ $ENC_DRIVE/update/
		RET=$?

		if [ $RET -ne 0 ]; then
			echo "Sync attempt returned (Ret: $RET)"
		else
			break
		fi
	done

	if [ $RET -ne 0 ]; then
		echo "Payload sync failed."
	else
		# Delete empty directories if files were removed
		find $ENC_DRIVE/update -type d -empty -delete
		sync

		DEVICE_VER=$(cat $ENC_DRIVE/live/version.cfg)
		LATEST_VER=$(cat $ENC_DRIVE/update/version.cfg)
			
		echo "Payload device version: $DEVICE_VER"
		echo "Payload latest version: $LATEST_VER"
	
		if [ "x$DEVICE_VER" != "x$LATEST_VER" ]; then

			echo "Updating payload (no reboot required) ..."

			rsync -av --delete $ENC_DRIVE/update $ENC_DRIVE/live
			sync
		
			# Delete empty directories if files were removed
			find $ENC_DRIVE/live -type d -empty -delete
			sync
		fi

		echo "Payload up to date."
	fi
}

update_settings() {	

	mkdir -p $BOOT_DIR/settings

	RETRY=0
	RETRY_MAX=10

	while [ $RETRY -lt $RETRY_MAX ]; do
		RETRY=$((RETRY + 1))
		echo "Sync attempt $RETRY for settings"
	
		s3cmd -v --config /run/commission/s3cfg-download.cfg --no-check-md5 sync --no-preserve --delete-removed s3://iot-device-download/$(cat /run/commission/cust.cfg)/$(cat /run/commission/site.cfg)/settings/ $BOOT_DIR/settings/
		RET=$?

		if [ $RET -ne 0 ]; then
			echo "Sync attempt returned (Ret: $RET)"
		else
			break
		fi
	done

	if [ $RET -ne 0 ]; then
		echo "Settings sync failed."
	else
		# Delete empty directories if files were removed
		find $ENC_DRIVE/update -type d -empty -delete
		sync

		DEVICE_VER=$(cat /run/settings/version.cfg)
		LATEST_VER=$(cat $BOOT_DIR/settings/version.cfg)
			
		echo "Settings device version: $DEVICE_VER"
		echo "Settings latest version: $LATEST_VER"
	
		if [ "x$DEVICE_VER" != "x$LATEST_VER" ]; then

			echo "Updated settings (reboot required) ..."

			sync
			reboot
		fi

		echo "Settings up to date."
	fi
}

# Update reboot count
touch $REBOOT_COUNT_FILE
echo "$(($(cat $REBOOT_COUNT_FILE) + 1))" > $REBOOT_COUNT_FILE

# Generate key
/bin/xkey

# Make commissioning data available under /run
if [ -f $BOOT_DIR/commission.tar.gz.enc ]; then
	rm -rf /run/commission
	cat $BOOT_DIR/commission.tar.gz.enc | openssl enc -aes-256-cbc -pbkdf2 -d -k "$(cat $KEYFILE)" | tar xz -C /run
fi

# Flash green during update process (cloud sync)
/bin/led-control led0 flash 10

# Wait for cloud init

while [ true ]; do

       STATUS=$(cloud-init status | cut -d ' ' -f 2)
       if [ "x$STATUS" == "xdone" ]; then
               echo "Cloud Init Complete - Update Next"
               break
       else
               echo "Cloud Init Busy - Waiting before update ..."
       fi

       sleep 5
done

# Wait up to 5mins
WAIT_MAX=300

START=$(date +%s)
WAIT=0
ONLINE=0

while [ $WAIT -lt $WAIT_MAX ]; do

	wget -q --spider http://google.com
	RET=$?
	if [ $RET -eq 0 ]; then
    		echo "Online - Attempting Update"
		ONLINE=1
		break
	else
    		echo "Offline"
	fi

	sleep 1
	NOW=$(date +%s)
	WAIT=$((NOW - START))
done

if [ $ONLINE -eq 0 ]; then
	echo "Offline - Skipping Update"
else

        # Ensure time is good
	ntpdate -v ntp.ubuntu.com

	if [ -f /run/commission/s3cfg-upload.cfg ] && [ -f /run/commission/s3cfg-download.cfg ] && [ -f /run/commission/cust.cfg ] && [ -f /run/commission/site.cfg ]; then

		update_log_clear

		update_log_publish "Online and ready to start update."
		
		# We only dump logs if enabled
		DEBUG_LOGS=$(cat /run/settings/update.cfg | grep debug-logs | sed -n 's/[^=]*=\(.*\)/\1/p')
	
		if [ "x$DEBUG_LOGS" == "xyes" ]; then
			
			# Capture early boot logs
			BOOT_LOGS=$SERIAL-boot
			BOOT_PATH=/run/$BOOT_LOGS
			mkdir -p $BOOT_PATH
			cp -f /run/initramfs/fsck.log $BOOT_PATH/fsck.txt
			cp -f /var/log/syslog $BOOT_PATH/syslog.txt
			cp -f /var/log/dmesg  $BOOT_PATH/dmesg.txt

			tar -czf /run/$BOOT_LOGS.tar.gz -C /run/ $BOOT_LOGS

			upload_file "/run/$BOOT_LOGS.tar.gz"

			update_log_publish "Early boot logs published."
	
			# Capture logs
			DEBUG_LOGS=$SERIAL-debug
			DEBUG_PATH=/run/$DEBUG_LOGS
			mkdir -p $DEBUG_PATH
			journalctl -k --since "7 days ago" > $DEBUG_PATH/kernel.txt
			journalctl -u payload --since "7 days ago" > $DEBUG_PATH/payload.txt
			journalctl -u bootstrap --since "7 days ago" > $DEBUG_PATH/bootstrap.txt
			journalctl -u health-logger --since "7 days ago" > $DEBUG_PATH/health-logger.txt
			journalctl -u updater --since "7 days ago" > $DEBUG_PATH/updater.txt
			journalctl -u update-check --since "7 days ago" > $DEBUG_PATH/update-check.txt
			journalctl -u payload-hw-check --since "7 days ago" > $DEBUG_PATH/payload-hw-check.txt
			journalctl -u netplan-wpa-wlan0 --since "7 days ago" > $DEBUG_PATH/netplan-wifi.txt
			journalctl -u systemd-networkd --since "7 days ago" > $DEBUG_PATH/systemd-networkd.txt
			cp -f /etc/netplan/config.yaml $DEBUG_PATH/networking.cfg
			journalctl -a --since "7 days ago" > $DEBUG_PATH/all.txt

			tar -czf /run/$DEBUG_LOGS.tar.gz -C /run/ $DEBUG_LOGS

			upload_file "/run/$DEBUG_LOGS.tar.gz"

			update_log_publish "Debug logs published."

		else
			update_log_publish "Debug logs disabled, not uploading."
		fi

		update_payload
		
		update_log_publish "Payload update processed."

		update_settings
		
		update_log_publish "Payload update processed."

	else
		echo "Commissioning and Settings files not found for required S3 update"
	fi	
fi

# GREEN LED
/bin/led-control led0 off

# Cleanup
rm -rf /run/commission
rm -rf $KEYFILE
