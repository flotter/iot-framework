#!/bin/bash -e

#----------------------------------------------------#
# COMMON DEFINES                                     #
#----------------------------------------------------#

DEVICE_ROOT=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

BUILD_IMAGE="ubuntu-20.04.5-preinstalled-server-arm64+raspi"
BUILD_URL="https://cdimage.ubuntu.com/releases/20.04/release/$BUILD_IMAGE.img.xz"
BUILD_MD5SUM="4d079a25c9571b0e9eb52224f5884285"
BUILD_SIZE=4096 # MiB

FIRMWARE_USER=iot

#----------------------------------------------------#
# COMMISSION                                         #
#----------------------------------------------------#

device_firmware() {

	FIRMWARE_NAME_FINAL=$IOT_BUILD_DIR/$DEVICE/iot-firmware-$DEVICE-$VERSION-$DATE.img
	FIRMWARE_NAME=$IOT_BUILD_DIR/$DEVICE/tmp.img
	
	pnn "- Downloading base image : "
	mkdir -p $IOT_DOWNLOAD_DIR/$DEVICE
	if [ -f $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz ]; then
		MD5=$(md5sum $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz | sed -n 's/\(^[^ ]*\).*/\1/p')
	fi
	
	if [ ! -f $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz ] || [ "x$MD5" != "x$BUILD_MD5SUM" ]; then
		rm -rf $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz
		run wget -P $IOT_DOWNLOAD_DIR/$DEVICE $BUILD_URL
		return_check "Image URL failed."
	fi
	pg "Done"
	
	pnn "- Image integrity check : "
	if [ -f $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz ]; then
		MD5=$(md5sum $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz | sed -n 's/\(^[^ ]*\).*/\1/p')
		run echo "MD5SUM: $MD5 (vs $BUILD_MD5SUM)"
	fi	
	if [ "x$MD5" == "x$BUILD_MD5SUM" ] && [ "x$MD5" != "x" ]; then
		pg "Pass"
	else
		err "Downloaded base image MD5 mismatch."
	fi

	pnn "- Cleaning up environment for build : "
	rm -rf $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img
	rm -rf $IOT_BUILD_DIR/$DEVICE
	mkdir -p $IOT_BUILD_DIR/$DEVICE/
	rm -rf $FIRMWARE_NAME
	pg "Done"
	
	pnn "- Extracting image : "
	run unxz -f -k $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img.xz
	mv $IOT_DOWNLOAD_DIR/$DEVICE/$BUILD_IMAGE.img $FIRMWARE_NAME
	
	if [ -f $FIRMWARE_NAME ]; then
		pg "Done"
	else
		err "Image extract failure."
	fi
	
	pnn "- Restructuring image : "
	run truncate -s ${BUILD_SIZE}M $FIRMWARE_NAME
	return_check "Image file resizing failed."
	
	{
	    (
	    echo d
	    echo
	    echo n
	    echo p
	    echo
	    echo
	    echo +3584M
	    echo n
	    echo p
	    echo
	    echo
	    echo +32M
	    echo n
	    echo p
	    echo
	    echo +128M
	    sleep 1
	    echo w
	    ) | fdisk $FIRMWARE_NAME
	} > /dev/null 2>&1
	
	sync
	LOOPDEV=$(losetup --show -f $FIRMWARE_NAME)
	partprobe ${LOOPDEV}

	run e2fsck -f -p ${LOOPDEV}p2
	return_check "Partition check failed."
	
	run resize2fs ${LOOPDEV}p2 
	return_check "Partition Resize failed."

	run mkfs.ext4 ${LOOPDEV}p4
	sync
	run losetup -d ${LOOPDEV}
	
	pg "Done"

	pnn "- Mounting root filesystem : "
	
	LOOPDEV=$(losetup --show -P -f $FIRMWARE_NAME)
	mkdir -p $IOT_BUILD_DIR/$DEVICE/mnt/boot
	mkdir -p $IOT_BUILD_DIR/$DEVICE/mnt/root
	mount -o rw ${LOOPDEV}p2 $IOT_BUILD_DIR/$DEVICE/mnt/root
	mount -o rw ${LOOPDEV}p1 $IOT_BUILD_DIR/$DEVICE/mnt/boot
	
	pg "Done"
	
	pnn "- Preparing for foreign chroot : "
	
	mount --bind /dev $IOT_BUILD_DIR/$DEVICE/mnt/root/dev/
	mount --bind /sys $IOT_BUILD_DIR/$DEVICE/mnt/root/sys/
	mount --bind /proc $IOT_BUILD_DIR/$DEVICE/mnt/root/proc/
	mount --bind /dev/pts $IOT_BUILD_DIR/$DEVICE/mnt/root/dev/pts
	mkdir -p $IOT_BUILD_DIR/$DEVICE/mnt/root/boot/firmware
	mount --bind $IOT_BUILD_DIR/$DEVICE/mnt/boot $IOT_BUILD_DIR/$DEVICE/mnt/root/boot/firmware
	mkdir -p $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-files
	mount --bind $IOT_DEVICE_DIR/$DEVICE/device-files $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-files
	
	mv $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf.backup
	echo "nameserver 8.8.8.8" > $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf
	cp -f /usr/bin/qemu-aarch64-static $IOT_BUILD_DIR/$DEVICE/mnt/root/usr/bin/
	cp -f $IOT_DEVICE_DIR/$DEVICE/device-prepare $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER

	echo "PRODUCTION=$PRODUCTION" >> $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	echo "VERSION=$VERSION" >> $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	echo "DATE=$DATE" >> $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	echo "DEBUG_SHELL=$DEBUG_SHELL" >> $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	echo "VERBOSE=$VERBOSE" >> $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	
	pg "Done"
	
	pn
	pg "Foreign chroot start"
	pn
	
	chroot $IOT_BUILD_DIR/$DEVICE/mnt/root /home/iot/device-prepare
	
	pn
	pg "Foreign chroot end"
	pn
	
	pnn "- Cleaning up chroot : "
	
	rm -f $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-prepare
	rm -f $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-input
	rm -f $IOT_BUILD_DIR/$DEVICE/mnt/root/usr/bin/qemu-aarch64-static
	rm -f $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf
	mv $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf.backup $IOT_BUILD_DIR/$DEVICE/mnt/root/etc/resolv.conf
	
	sync
	
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-files
	rm -rf $IOT_BUILD_DIR/$DEVICE/mnt/root/home/$FIRMWARE_USER/device-files
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/boot/firmware
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/dev/pts
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/dev/
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/sys/
	umount $IOT_BUILD_DIR/$DEVICE/mnt/root/proc/
	
	pg "Done"
	
	
	pnn "- Waiting for depedencies : "
	
	sync
	sleep 5
	
	pg "Done"
	
	pnn "- Unmounting root filesystem : "
	
	umount ${LOOPDEV}p1
	umount ${LOOPDEV}p2
	rm -d $IOT_BUILD_DIR/$DEVICE/mnt/boot
	rm -d $IOT_BUILD_DIR/$DEVICE/mnt/root
	rm -d $IOT_BUILD_DIR/$DEVICE/mnt
	run losetup -d ${LOOPDEV}
	
	pg "Done"
}
