#!/bin/bash -e

CPWD="$( cd "$(dirname "$0")" ; pwd -P )"

#----------------------------------------------------#
# COMMON ATTRIBUTES                                  #
#----------------------------------------------------#

source $CPWD/scripts/iot-utils

#----------------------------------------------------#
# DEFINES / MACROS                                   #
#----------------------------------------------------#

LOG=$LOGS_DIR/iot-firmware-debug.log

#----------------------------------------------------#
# CMDLINE OPTIONS                                    #
#----------------------------------------------------#

ARGC=$#
ARGV=("$@")

VERBOSE=false
HELP=false
IDEBUG=false
ISHELL=false
IP=

# Clear args
set --

COUNT=0
while [ $COUNT -lt $ARGC ]; do
	STRIP=${ARGV[COUNT]}

	ID=0
	LONGFORMAT=`echo $STRIP | cut -b 1-2`
	if [ "x$LONGFORMAT" == "x--" ]; then
		STRIP=`echo ${ARGV[COUNT]} | cut -b 2-3`
	else
		ID=`echo $STRIP | cut -b 3-`
		STRIP=`echo $STRIP | cut -b 1-2`
	fi
	

	if [ "x$STRIP" == "x-v" ]; then
		VERBOSE=true
	elif [ "x$STRIP" == "x-i" ]; then
		COUNT=$((COUNT+1))
		IP=${ARGV[COUNT]}
		if [ "x$IP" == "x" ]; then			
			pl
			pr "Error: Unknown argument"
			COUNT=$ARGC
			HELP=true
		fi
	elif [ "x$STRIP" == "x-h" ]; then
		HELP=true
	elif [ "x$STRIP" == "x-d" ]; then
		IDEBUG=true
	elif [ "x$STRIP" == "x-s" ]; then
		ISHELL=true
	else
		pl
		pr "Error: Unknown argument"
		COUNT=$ARGC
		HELP=true
	fi
COUNT=$((COUNT+1))
done

log "Started"

pl
pg "iot-firmware-debug ($VERSION)"

if [ "$HELP" == "true" ]; then
	pn "Usage:"
	pl
	pn "Debug payload on domain specific device."
	pl
	pn "iot-firmware-debug [-v] [-h] ..."
	pl
	pn "Help:"
	pl
	pn "-v (--verbose)      Verbose output for operations"
	pn "-i (--ip)           Manually supply endpoint IP"
	pn "-h (--help)         Print this"
	pn "-d (--debug)        Interactive shell after payload run"
	pn "-s (--shell)        Interactive shell only"
	pl
	exit 0
fi

#----------------------------------------------------#
# PREPARE                                            #
#----------------------------------------------------#

pn
pg ":: Setup & Checks ::"
pn

common_setup

log "Common Setup OK"

#----------------------------------------------------#
# BODY                                               #
#----------------------------------------------------#

pl
pg ":: Device Selection ::"
pl

DEVICE=$(device)

if [ -z "$DEVICE" ] || [ ! -d $IOT_DEVICE_DIR/$DEVICE ]; then

	if [ "x$ADMIN" == "x1" ]; then

		select_device
	else
		err "No default device is set. Without Admin mode we cannot proceed."
	fi
else
	# Default device (Non-admin mode compatible)
	pnn "- Device selected : "
	pg "$DEVICE"
fi


pl
pg ":: Domain Selection ::"
pl

DOMAIN=$(domain)

if [ -z "$DOMAIN" ] || [ ! -d $MASTER_DB/$DOMAIN ]; then

	if [ "x$ADMIN" == "x1" ]; then

		select_domain
	else
		err "No default domain is set. Without Admin mode we cannot proceed."
	fi
else
	# Single Default domain (Non-admin mode compatible)

        CUST=$(dirname $DOMAIN)
        SITE=$(basename $DOMAIN)
fi

pnn "- Domain selected : "
pg "$CUST/$SITE"

pl
pg ":: Endpoint Selection ::"
pl

ENDPOINT=$(endpoint)

if [ -z "$ENDPOINT" ]; then

	if [ "x$ADMIN" == "x1" ]; then

		select_endpoint
	else
		err "No default endpoint is set. Without Admin mode we cannot proceed."
	fi
fi

pnn "- Endpoint selected : "
if [ ! -z "$IP" ]; then
	pg "Manual IP"
else
	pg "$ENDPOINT"
fi

pl
pg ":: Debug Prepare ::"
pl

if [ ! -z "$IP" ]; then
	pnn "- Manual Endpoint IP : "
	ENDPOINT_IP=$IP
	pg "$ENDPOINT_IP"
else
	pnn "- Last Endpoint IP : "
	get_endpoint_ip
	pg "$ENDPOINT_IP"
fi

pnn "- Endpoint Last Seen : "
get_endpoint_ts
NOW=$(date --utc +%s)
DELTA=$((NOW - ENDPOINT_TS))
HOURS=$((DELTA / 3600))
MINS=$(((DELTA - (HOURS * 3600)) / 60))
SECS=$((DELTA - (HOURS * 3600) - (MINS * 60)))
pg "${HOURS}h-${MINS}m-${SECS}s ago"

pnn "- Endpoint Ping : "
run ping -c1 $ENDPOINT_IP
return_check "Failed to ping endpoint IP $ENDPOINT_IP"
pg "OK"

USER=iot
SSHPASS=training

export SSHPASS=$SSHPASS

pnn "- SSH Connection Test : "
run sshpass -e ssh -q -o ConnectTimeout=5 -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP exit
return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
pg "Pass"

pnn "- Endpoint Match : "
SERIAL_VERIFY=$(sshpass -e ssh -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP cat /proc/cpuinfo | grep Serial | cut -d':' -f2 | xargs)

if [ "$ENDPOINT" != "$SERIAL_VERIFY" ]; then
	pr "The endpoint we are correcting to has a different endpoint serial ($SERIAL_VERIFY)."
	pl
	exit 1
fi
pg "Yes"


if [ "$ISHELL" = "false" ]; then
	
	pnn "- Payload service stop : "
	run sshpass -e ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'sudo systemctl stop payload || true'
	return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
	pg "Done"


	pnn "- Injecting latest payload : "
	run sshpass -e ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'sudo mkdir -p /run/x-payload; sudo chmod 777 /run/x-payload || true'
        return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
	run sshpass -e scp -r -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $REPO_ROOT/payload/* $USER@$ENDPOINT_IP:/run/x-payload/
        return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
	pg "Done"

	set +e
	pl
	pg "Running: payload/payload-start"
	pl
	pg "Press CTRL-C to exit ..."
	pl
	# Run payload
        sshpass -e ssh -t -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'cd /run/x-payload; sudo bash ./payload-start; echo; echo "Crash or exit detected, falling to terminal..."; echo; echo "Run \"exit\" to stop the debug session"; echo; bash'

	if [ "$IDEBUG" = "true" ]; then
		pl
		pg "Starting terminal ..."
		pl
		pg "Run \"exit\" to return."
		pl

		# Shell
		set +e
		sshpass -e ssh -t -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'cd /run/x-payload; sudo bash'
		set -e
	fi

	pl
	pg "Running: payload/payload-stop"
	pl
	pg "Press CTRL-C to exit ..."
	pl
	# Run payload
        sshpass -e ssh -t -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'cd /run/x-payload; sudo bash ./payload-stop'
	set -e

	pl	
	
	pnn "- Removing injected payload : "
	run sshpass -e ssh -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'sudo rm -rf /run/x-payload || true'
        return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
	pg "Done"
	
	pnn "- Payload service restarted : "	
	run sshpass -e ssh -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'sudo systemctl start payload || true'
	return_check "Failed to connect to endpoint $ENDPOINT on IP $ENDPOINT_IP"
	pg "Done"

else
	pl
	pg ":: Endpoint ::"

	pl
	pg "Starting terminal ..."
	pl
	pg "Run \"exit\" to return."
	pl
	# Shell
	set +e
	sshpass -e ssh -t -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $USER@$ENDPOINT_IP 'cd /home/iot/payload; sudo -E bash'
	set -e
fi
pl
