#!/bin/bash

### DEFINES ###

USER=`whoami`
CPWD="$( cd "$(dirname "$0")" ; pwd -P )"

BUILD_VERSION="v2.0.14"
BUILD_DATE=$(date +"%d_%m_%y__%H_%M_%S")
BUILD_OUTPUT_DIR=$CPWD/images
BUILD_IMAGE="ubuntu-22.04-preinstalled-server-arm64+raspi"
BUILD_URL="https://cdimage.ubuntu.com/releases/22.04/release/$BUILD_IMAGE.img.xz"
BUILD_MD5SUM="a39e2038ac4c1ec458bf5dd2f3ad7f41"
BUILD_SIZE=15G

P_RESET="\e[0m"
P_RED="\e[31m"
P_GREEN="\e[32m"
P_YELLOW="\e[33m"

### MACROS ###

run() {
        if $VERBOSE; then
                v=$(exec 2>&1 && set -x && set -- "$@")
                echo "#${v#*--}"
                "$@"
        else
                "$@" >/dev/null 2>&1
        fi
}

function pl() {
	echo -e "$P_RESET"
}

function pn() {
	echo -e "$P_RESET$@"
}

function pr() {
	echo -e "$P_RED$@$P_RESET"
}

function py() {
	echo -e "$P_YELLOW$@$P_RESET"
}

function pg() {
	echo -e "$P_GREEN$@$P_RESET"
}

function pnn() {
	echo -ne "$P_RESET$@"
}

function prn() {
	echo -ne "$P_RED$@$P_RESET"
}

function pgn() {
	echo -ne "$P_GREEN$@$P_RESET"
}

function exitbuild() {
	if [ "x$SOURCED" == "x1" ]; then
		return 1
	else
		exit 1
	fi
}

### OPTIONS ###

ARGC=$#
ARGV=("$@")

VERBOSE=false
HELP=false
BUILD_FFMPEG=false
OUTPUT=$BUILD_OUTPUT_DIR/rpi_image_${BUILD_VERSION}_${BUILD_DATE}.img
PRODUCTION=false
INTERACTIVE=false

# Clear args
set --

COUNT=0
while [ $COUNT -lt $ARGC ]; do
	STRIP=${ARGV[COUNT]}

	ID=0
	LONGFORMAT=`echo $STRIP | cut -b 1-2`
	if [ "x$LONGFORMAT" == "x--" ]; then
		STRIP=`echo ${ARGV[COUNT]} | cut -b 2-3`
	else
		ID=`echo $STRIP | cut -b 3-`
		STRIP=`echo $STRIP | cut -b 1-2`
	fi
	

	if [ "x$STRIP" == "x-v" ]; then
		VERBOSE=true
	elif [ "x$STRIP" == "x-h" ]; then
		HELP=true
	elif [ "x$STRIP" == "x-p" ]; then
		PRODUCTION=true
	elif [ "x$STRIP" == "x-b" ]; then
		BUILD_FFMPEG=true
	elif [ "x$STRIP" == "x-i" ]; then
		INTERACTIVE=true
	elif [ "x$STRIP" == "x-o" ]; then
		COUNT=$((COUNT+1))
		OUTPUT=${ARGV[COUNT]}
		if [ "x$OUTPUT" == "x" ]; then			
			pl
			pr "Error: Unknown argument"
			COUNT=$ARGC
			HELP=true
		fi
	else
		pl
		pr "Error: Unknown argument"
		COUNT=$ARGC
		HELP=true
	fi
COUNT=$((COUNT+1))
done

pl
pg "ePlayer Image Generation Tool $BUILD_VERSION"
pl

if [ "$HELP" == "true" ]; then
	pn "Usage:"
	pl
	pn "ep-disk [-v] [-h] [-o <PATH>]"
	pl
	pn "Help:"
	pl
	pn "-v (--verbose)     Verbose output for operations"
	pn "-o (--output)      Output image path"
	pn "-p (--production)  Production ready image"
	pn "-b (--build-ffmpeg Build FFMPEG from source"
	pn "-i (--interactive) Provide interactive terminal during creation"
	pn "-h (--help)        Print this"
	pl
	exitbuild
fi

pn
pg ":: ENVIRONMENT SETUP ::"
pn

pnn "- Running as user : "
pg $USER

pnn "- Running with SUDO : "
ID=$(id -u)
if [ "x$ID" == "x0" ]; then
    pg "YES"
else
    pr "NO"
    exitbuild
fi

pnn "- Disabling automount : "
gsettings set org.gnome.desktop.media-handling automount false
pg "DONE"

pnn "- Installing missing components : "

run sudo apt-get install -y git build-essential bison flex p7zip-full squashfs-tools pv bc device-tree-compiler libssl-dev qemu-user-static binfmt-support sshpass lvm2 kpartx uuid-dev 

pg "DONE"


### 1. GET IMAGE ###

pn
pg ":: IMAGE SETUP ::"
pn

pnn "- Downloading base image : "

if [ -f $CPWD/downloads/$BUILD_IMAGE.img.xz ]; then
	MD5=$(md5sum $CPWD/downloads/$BUILD_IMAGE.img.xz | sed -n 's/\(^[^ ]*\).*/\1/p')
fi

if [ ! -f $CPWD/downloads/$BUILD_IMAGE.img.xz ] || [ "x$MD5" != "x$BUILD_MD5SUM" ]; then
	mkdir -p $CPWD/downloads
	run wget -P $CPWD/downloads $BUILD_URL
fi

pg "DONE"

pnn "- Image integrity : "

if [ -f $CPWD/downloads/$BUILD_IMAGE.img.xz ]; then
	MD5=$(md5sum $CPWD/downloads/$BUILD_IMAGE.img.xz | sed -n 's/\(^[^ ]*\).*/\1/p')
	run echo "MD5SUM: $MD5 (vs $BUILD_MD5SUM)"
fi

if [ "x$MD5" == "x$BUILD_MD5SUM" ] && [ "x$MD5" != "x" ]; then
	pg "OK"
else
	pr "FAIL"
	exitbuild
fi

pnn "- Cleaning up environment for build : "
rm -rf $CPWD/downloads/$BUILD_IMAGE.img
rm -rf $CPWD/mnt
pg "DONE"

pnn "- Extracting image : "

if [ ! -f $CPWD/downloads/$BUILD_IMAGE.img ]; then

	cd $CPWD/downloads/
	run unxz -k $CPWD/downloads/$BUILD_IMAGE.img.xz
	cd $CPWD/
	
	if [ -f $CPWD/downloads/$BUILD_IMAGE.img ]; then
		pg "DONE"
	else
		pr "FAIL"
		exitbuild
	fi
else
	pg "DONE"
fi

pnn "- Resizing image ($BUILD_SIZE) : "

truncate -s $BUILD_SIZE $CPWD/downloads/$BUILD_IMAGE.img
RET=$(echo $?)
if [ $RET -ne 0 ]; then
	pr "FAIL"
	exitbuild
fi

LOOPDEV=$(losetup --show -P -f $CPWD/downloads/$BUILD_IMAGE.img)
{
    (
    echo d
    echo
    echo n
    echo p
    echo
    echo
    echo +10G
    echo n
    echo p
    echo
    echo
    echo +32M
    echo n
    echo p
    echo
    echo
    sleep 1
    echo w
    ) | fdisk $LOOPDEV
} > /dev/null 2>&1

sync
partprobe ${LOOPDEV}
run e2fsck -f -p ${LOOPDEV}p2
RET=$(echo $?)

run resize2fs ${LOOPDEV}p2 
run mkfs.ext4 ${LOOPDEV}p4
sync
run losetup -d ${LOOPDEV}

if [ $RET -ne 0 ]; then
	pr "FAIL"
	exitbuild
else
	pg "DONE"
fi

pnn "- Mounting root filesystem : "

LOOPDEV=$(losetup --show -P -f $CPWD/downloads/$BUILD_IMAGE.img)
mkdir -p $CPWD/mnt/boot
mkdir -p $CPWD/mnt/root
mount -o rw ${LOOPDEV}p2 $CPWD/mnt/root
mount -o rw ${LOOPDEV}p1 $CPWD/mnt/boot

pg "DONE"

pnn "- Preparing for foreign chroot : "

mount --bind /dev $CPWD/mnt/root/dev/
mount --bind /sys $CPWD/mnt/root/sys/
mount --bind /proc $CPWD/mnt/root/proc/
mount --bind /dev/pts $CPWD/mnt/root/dev/pts
mkdir -p $CPWD/mnt/root/boot/firmware
mount --bind $CPWD/mnt/boot $CPWD/mnt/root/boot/firmware
mkdir -p $CPWD/mnt/root/home/rpi/native-prepare
mount --bind $CPWD/native-prepare $CPWD/mnt/root/home/rpi/native-prepare

mv $CPWD/mnt/root/etc/resolv.conf $CPWD/mnt/root/etc/resolv.conf.backup
echo "nameserver 8.8.8.8" > $CPWD/mnt/root/etc/resolv.conf
cp -f /usr/bin/qemu-aarch64-static $CPWD/mnt/root/usr/bin/
cp -f $CPWD/native-prepare.sh $CPWD/mnt/root/home/rpi
echo "$BUILD_VERSION" > $CPWD/mnt/root/home/rpi/.firmware_version

echo "GEN_PRODUCTION=$PRODUCTION" >> $CPWD/mnt/root/home/rpi/native-input
echo "GEN_VERSION=$BUILD_VERSION" >> $CPWD/mnt/root/home/rpi/native-input
echo "GEN_DATE=$BUILD_DATE" >> $CPWD/mnt/root/home/rpi/native-input
echo "GEN_INTERACTIVE=$INTERACTIVE" >> $CPWD/mnt/root/home/rpi/native-input
echo "GEN_VERBOSE=$VERBOSE" >> $CPWD/mnt/root/home/rpi/native-input
echo "GEN_BUILD_FFMPEG=$BUILD_FFMPEG" >> $CPWD/mnt/root/home/rpi/native-input

pg "DONE"

if [ "x$INTERACTIVE" == "xtrue" ]; then
	pl
	py "[INPECTION POINT] Interactive terminal (type 'exit' to continue with native preparation) : "
	pl
	bash
	pl
fi

pn
pg "Foreign chroot start"
pn

chroot $CPWD/mnt/root /home/rpi/native-prepare.sh 

pn
pg "Foreign chroot end"
pn

pnn "- Cleaning up chroot : "

rm -f $CPWD/mnt/root/home/rpi/native-prepare.sh
rm -f $CPWD/mnt/root/home/rpi/native-input
rm -f $CPWD/mnt/root/usr/bin/qemu-aarch64-static
rm -f $CPWD/mnt/root/etc/resolv.conf
mv $CPWD/mnt/root/etc/resolv.conf.backup $CPWD/mnt/root/etc/resolv.conf

sync

umount $CPWD/mnt/root/home/rpi/native-prepare
rm -rf $CPWD/mnt/root/home/rpi/native-prepare
umount $CPWD/mnt/root/boot/firmware
umount $CPWD/mnt/root/dev/pts
umount $CPWD/mnt/root/dev/
umount $CPWD/mnt/root/sys/
umount $CPWD/mnt/root/proc/

pg "DONE"


pnn "- Waiting for depedencies (5sec) : "

sync
sleep 5

pg "OK"

pnn "- Unmounting root filesystem : "

umount ${LOOPDEV}p1
umount ${LOOPDEV}p2
rm -d $CPWD/mnt/boot
rm -d $CPWD/mnt/root
run losetup -d ${LOOPDEV}

pg "DONE"

mkdir -p $(dirname $OUTPUT)
mv -f $CPWD/downloads/$BUILD_IMAGE.img $OUTPUT
pl
pg "Image Ready: $OUTPUT"
pl
