#!/bin/bash -e

CPWD="$( cd "$(dirname "$0")" ; pwd -P )"

#----------------------------------------------------#
# COMMON ATTRIBUTES                                  #
#----------------------------------------------------#

source $CPWD/scripts/iot-utils

#----------------------------------------------------#
# DEFINES / MACROS                                   #
#----------------------------------------------------#

LOG=$MASTER_DB/iot-firmware-commission.log

#----------------------------------------------------#
# CMDLINE OPTIONS                                    #
#----------------------------------------------------#

ARGC=$#
ARGV=("$@")

VERBOSE=false
HELP=false
DEBUG_SHELL=false
SKIP_PAYLOAD=false


# Clear args
set --

COUNT=0
while [ $COUNT -lt $ARGC ]; do
	STRIP=${ARGV[COUNT]}

	ID=0
	LONGFORMAT=`echo $STRIP | cut -b 1-2`
	if [ "x$LONGFORMAT" == "x--" ]; then
		STRIP=`echo ${ARGV[COUNT]} | cut -b 2-3`
	else
		ID=`echo $STRIP | cut -b 3-`
		STRIP=`echo $STRIP | cut -b 1-2`
	fi
	

	if [ "x$STRIP" == "x-v" ]; then
		VERBOSE=true
	elif [ "x$STRIP" == "x-h" ]; then
		HELP=true
	elif [ "x$STRIP" == "x-d" ]; then
		DEBUG_SHELL=true
	elif [ "x$STRIP" == "x-s" ]; then
		SKIP_PAYLOAD=true
	else
		pl
		pr "Error: Unknown argument"
		COUNT=$ARGC
		HELP=true
	fi
COUNT=$((COUNT+1))
done

log "Started"

pl
pg "iot-firmware-commission ($VERSION)"

if [ "$HELP" == "true" ]; then
	pn "Usage:"
	pl
	pn "Commission existing firmware image for specific domain."
	pl
	pn "iot-firmware-commission [-v] [-h] ..."
	pl
	pn "Help:"
	pl
	pn "-v (--verbose)      Verbose output for operations"
	pn "-h (--help)         Print this"
	pn "-d (--debug-shell)  Interactive shell"
	pn "-s (--skip-payload) Payload will be updated when the unit is live"
	pl
	exitbuild
fi

#----------------------------------------------------#
# PREPARE                                            #
#----------------------------------------------------#

pn
pg ":: Setup & Checks ::"
pn

common_setup

log "Common Setup OK"

pnn "- Admin mode enabled : "
ADMIN=$(admin)
if [ "x$ADMIN" == "x1" ]; then
	pg "Yes"
else
	pg "No"
fi

#----------------------------------------------------#
# BODY                                               #
#----------------------------------------------------#

pl
pg ":: Device Selection ::"
pl

DEVICE=$(device)

if [ -z "$DEVICE" ] || [ ! -d $IOT_DEVICE_DIR/$DEVICE ]; then

	if [ "x$ADMIN" == "x1" ]; then

		select_device
	else
		pl
		pr "No default device is set. Without Admin mode we cannot proceed."
		pl
		exit 1
	fi
else
	# Default device (Non-admin mode compatible)
	pn "Default device selected : $DEVICE"
fi

pl
pg ":: Firmware Selection ::"
pl

select_remote_fw "*** Select locally built firmware instead ***"
pl

if [ ! -z "$FIRMWARE_REMOTE" ]; then

	pnn "- Remote Firmware : "
	pg "$S3_DEVICE_FW/$DEVICE/$FIRMWARE_REMOTE.tar.gz"

	pnn "- Firmware Downloading : "
	run mkdir -p $IOT_DOWNLOAD_DIR
	run rm -rf $IOT_DOWNLOAD_DIR/$FIRMWARE_REMOTE.tar.gz
	download_remote_fw_check "$S3_DEVICE_FW/$DEVICE/$FIRMWARE_REMOTE.tar.gz" $IOT_DOWNLOAD_DIR/
	pg "Done"

	pnn "- Firmware Decompressing : "
	run mkdir -p $IOT_FW_DIR
        run rm -rf $IOT_FW_DIR/$FIRMWARE_REMOTE
        run tar xvzf $IOT_DOWNLOAD_DIR/$FIRMWARE_REMOTE.tar.gz -C $IOT_FW_DIR/
	RET=$?
	if [ $RET -ne 0 ]; then
                pr "Fail"
                pl
                pr "Failed to decompress remote firmware (Ret: $RET)"
                pl

                exit 1
        fi
	pg "Done"

	pnn "- Ready for commissioning : "
	run rm -rf $IOT_FW_DIR/tmp.img
	mv $IOT_FW_DIR/$FIRMWARE_REMOTE $IOT_FW_DIR/tmp.img
	FIRMWARE_NAME_FINAL=$IOT_FW_DIR/$DEVICE/$FIRMWARE_REMOTE
	FIRMWARE_NAME=$IOT_FW_DIR/tmp.img
	pg "Yes"
else
	select_local_fw
	pl
	
	pnn "- Local Firmware : "
	pg "$IOT_BUILD_DIR/$DEVICE/$FIRMWARE_LOCAL"
	
	pnn "- Ready for commissioning : "
	run rm -rf $IOT_FW_DIR/tmp.img
	cp $IOT_BUILD_DIR/$DEVICE/$FIRMWARE_LOCAL $IOT_FW_DIR/tmp.img
	FIRMWARE_NAME_FINAL=$IOT_FW_DIR/$DEVICE/$FIRMWARE_LOCAL
	FIRMWARE_NAME=$IOT_FW_DIR/tmp.img
	pg "Yes"
fi

pl
pg ":: Domain Selection ::"
pl

DOMAIN=$(domain)

if [ -z "$DOMAIN" ] || [ ! -d $MASTER_DB/$DOMAIN ]; then

	if [ "x$ADMIN" == "x1" ]; then

		CUST_WILDCARD="*** All Customers IDs and Site IDs (dangerous) ***"
		select_domain_cust "$CUST_WILDCARD"
		pl

		if [ ! -z "$CUST" ]; then
			SITE_WILDCARD="*** All Site IDs for selected Customer ID (dangerous) ***"
			select_domain_site "$SITE_WILDCARD"
			pl

			pnn "- Domain selected : "
			if [ -z "$SITE" ]; then
				pg "$CUST/*"
			else
				pg "$CUST/$SITE"
			fi
			pl
		else
			SITE=
			pnn "- Domain selected : "
			pg "*/*"
			pl
		fi

		domain_iterate
	else
		pl
		pr "No default domain is set. Without Admin mode we cannot proceed."
		pl
		exit 1
	fi
else
	# Single Default domain (Non-admin mode compatible)
	DOMAINS=($DOMAIN)
	pnn "- Domain selected : "
	pg "$DOMAIN"
	pl
fi

pg ":: Domain Settings Verification ::"
pl


DOMAINS_MAX=${#DOMAINS[@]}
DOMAINS_COUNT=0

while [ $DOMAINS_COUNT -lt $DOMAINS_MAX ] ; do

	DOMAIN_NEXT=${DOMAINS[$DOMAINS_COUNT]}

	CUST=$(dirname $DOMAIN_NEXT)
	SITE=$(basename $DOMAIN_NEXT)
	
	pnn "- Domain ($DOMAIN_NEXT) settings location valid : "
	if [ -d $MASTER_DB/$DOMAIN_NEXT/settings ]; then
		pg "Yes"
	else
		pr "No"
		pl
		pr "Error: Settings folder does not exist"
		exit 1
	fi
	
	pnn "- Domain ($DOMAIN_NEXT) Netplan verification : "
	netplan_verify $CUST $SITE
	pg "Done"

	DOMAINS_COUNT=$((DOMAINS_COUNT + 1))
done

pl
pg ":: Domain Settings Cloud Update ::"
pl

DOMAINS_COUNT=0

while [ $DOMAINS_COUNT -lt $DOMAINS_MAX ] ; do

	DOMAIN_NEXT=${DOMAINS[$DOMAINS_COUNT]}

	CUST=$(dirname $DOMAIN_NEXT)
	SITE=$(basename $DOMAIN_NEXT)

	pnn "- Domain ($DOMAIN_NEXT) publish settings : "
	update_settings_check
	pg "Done"

	pnn "- Domain ($DOMAIN_NEXT) change status : "
	pg "$SETTINGS_UPDATE_STATUS"
	
	DOMAINS_COUNT=$((DOMAINS_COUNT + 1))

done

pl
pg ":: Domain Payload Verification ::"
pl

DOMAINS_MAX=${#DOMAINS[@]}
DOMAINS_COUNT=0

while [ $DOMAINS_COUNT -lt $DOMAINS_MAX ] ; do

	DOMAIN_NEXT=${DOMAINS[$DOMAINS_COUNT]}

	CUST=$(dirname $DOMAIN_NEXT)
	SITE=$(basename $DOMAIN_NEXT)
	
	pnn "- Domain ($DOMAIN_NEXT) payload location valid : "
	if [ -d $MASTER_DB/$DOMAIN_NEXT/payload ]; then
		pg "Yes"
	else
		pr "No"
		pl
		pr "Error: Payload folder does not exist"
		exit 1
	fi
	
	pnn "- Domain ($DOMAIN_NEXT) payload size check : "
	S=$(du -hs --block-size=1M $MASTER_DB/$CUST/$SITE/payload | sed -n 's/^\([0-9.]*\).*/\1/p')
	if [ $S -gt $FIRMWARE_PAYLOAD_MAX_SIZE ]; then
		pr "Fail"
		pl
		pr "Payload exceeds ${FIRMWARE_PAYLOAD_MAX_SIZE}MiB ($CUST/$SITE/payload)"
		
		log "Payload exceeds ${FIRMWARE_PAYLOAD_MAX_SIZE}MiB ($CUST/$SITE/payload)"
		
		exit 1
	fi
	pg "Done"

	DOMAINS_COUNT=$((DOMAINS_COUNT + 1))
done

pl
pg ":: Domain Payload Cloud Update ::"
pl

DOMAINS_COUNT=0

while [ $DOMAINS_COUNT -lt $DOMAINS_MAX ] ; do

	DOMAIN_NEXT=${DOMAINS[$DOMAINS_COUNT]}

	CUST=$(dirname $DOMAIN_NEXT)
	SITE=$(basename $DOMAIN_NEXT)

	pnn "- Domain ($DOMAIN_NEXT) publish payload : "
	update_payload_check
	pg "Done"

	pnn "- Domain ($DOMAIN_NEXT) change status : "
	pg "$PAYLOAD_UPDATE_STATUS"
	
	DOMAINS_COUNT=$((DOMAINS_COUNT + 1))

done

log "Commissioning Temp Image Name: $FIRMWARE_NAME"
log "Commissioning Final Image Name: $FIRMWARE_NAME_FINAL"

pl
pg ":: Commissioning Image ::"
pl

if [ ! -f $IOT_DEVICE_DIR/$DEVICE/device-commission ]; then
	pl
	pr "Error: Cannot locate commission script for device: $DEVICE"
	pl

	log "Error: Cannot locate commission script for device: $DEVICE"
	exit 1
fi

source $IOT_DEVICE_DIR/$DEVICE/device-commission

device_commission

rm -rf $FIRMWARE_NAME_FINAL
mv $FIRMWARE_NAME $FIRMWARE_NAME_FINAL

pl
pnn "Device Firmware Ready : "
pg "$FIRMWARE_NAME_FINAL"
pl

