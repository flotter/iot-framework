#!/bin/bash

### DEFINES ###

USER=`whoami`
CPWD="$( cd "$(dirname "$0")" ; pwd -P )"

ADD_VERSION="v1.0.0"
DATE=$(date +"%d_%m_%y__%H_%M_%S")
IMAGE_INPUT_DIR=$CPWD/images

S3_ALL=$CPWD/security/s3/.s3cfg-all
S3_DEVICE_FW="s3://iot-device-fw/rpi"
S3_DEVICE_DL="s3://iot-device-download"
S3_DEVICE_UL="s3://iot-device-upload"
S3_SOURCE=$CPWD/data

LOG=$S3_SOURCE/add-device-log.txt

P_RESET="\e[0m"
P_RED="\e[31m"
P_GREEN="\e[32m"

### MACROS ###

run() {
        if $VERBOSE; then
                v=$(exec 2>&1 && set -x && set -- "$@")
                echo "#${v#*--}"
                "$@"
        else
                "$@" >/dev/null 2>&1
        fi
}

function pl() {
	echo -e "$P_RESET"
}

function pn() {
	echo -e "$P_RESET$@"
}

function pr() {
	echo -e "$P_RED$@$P_RESET"
}

function pg() {
	echo -e "$P_GREEN$@$P_RESET"
}

function pnn() {
	echo -ne "$P_RESET$@"
}

function prn() {
	echo -ne "$P_RED$@$P_RESET"
}

function pgn() {
	echo -ne "$P_GREEN$@$P_RESET"
}

function exitbuild() {
	if [ "x$SOURCED" == "x1" ]; then
		return 1
	else
		exit 1
	fi
}

### OPTIONS ###

ARGC=$#
ARGV=("$@")

VERBOSE=false
HELP=false

# Clear args
set --

COUNT=0
while [ $COUNT -lt $ARGC ]; do
	STRIP=${ARGV[COUNT]}

	ID=0
	LONGFORMAT=`echo $STRIP | cut -b 1-2`
	if [ "x$LONGFORMAT" == "x--" ]; then
		STRIP=`echo ${ARGV[COUNT]} | cut -b 2-3`
	else
		ID=`echo $STRIP | cut -b 3-`
		STRIP=`echo $STRIP | cut -b 1-2`
	fi
	

	if [ "x$STRIP" == "x-v" ]; then
		VERBOSE=true
	elif [ "x$STRIP" == "x-h" ]; then
		HELP=true
	else
		pl
		pr "Error: Unknown argument"
		COUNT=$ARGC
		HELP=true
	fi
COUNT=$((COUNT+1))
done

pl
pg "IOT Customer Add/Modification Tool $ADD_VERSION"

echo "[$(date)] Add/Modify Started OK" >> $LOG

if [ "$HELP" == "true" ]; then
	pn "Usage:"
	pl
	pn "ep-add-modify [-v] [-h] ..."
	pl
	pn "Help:"
	pl
	pn "-v (--verbose)     Verbose output for operations"
	pn "-h (--help)        Print this"
	pl
	exitbuild
fi

pn
pg ":: ENVIRONMENT SETUP ::"
pn

pnn "- Running as user : "
pg $SUDO_USER

pnn "- Running with SUDO : "
ID=$(id -u)
if [ "x$ID" == "x0" ]; then
    pg "YES"
else
    pr "NO"
    exitbuild
fi

pnn "- Disabling automount : "
gsettings set org.gnome.desktop.media-handling automount false > /dev/null 2>&1
pg "DONE"

pnn "- Installing missing components : "

run sudo apt-get install -y git build-essential bison flex p7zip-full squashfs-tools pv bc device-tree-compiler libssl-dev qemu-user-static binfmt-support sshpass lvm2 kpartx uuid-dev
run apt-get install -y python3-pip
run python3 -m pip install --upgrade pip
run python3 -m pip install s3cmd
pg "DONE"

### CONFIRM ADD CUSTOMER

pl
pg "You are about to add customers and sites."
pl
pnn "Type 'ok' and Enter to continue : "
read SELECT

if [ "x$SELECT" != "xok" ]; then
	pl
	pr "Add aborted"
	exit 1
fi

ADD_NEXT=true

# Add loop
while [ "x$ADD_NEXT" == "xtrue" ]; do


	## CUSTOMER

	pl
	pgn "Create new customer in database? [y, N] (alternatively use existing)"
	read -n1 -s SELECT
	pl
	if [ "x$SELECT" == "xY" ] || [ "x$SELECT" == "xy" ]; then
		pgn "Specify customer name : [cust-]"
		read CUST
		CUST=cust-$CUST

		if [ "x$CUST" == "x" ]; then
			pl
			pr "Empty customer cannot be created"
			pl
			continue
		fi

		if [ -d $S3_SOURCE/$CUST ]; then
			pl
			pr "Customer cannot be created, it already exists ($CUST)"
			pl
			continue
		fi
	else

		CUST_LIST=($(ls $S3_SOURCE | grep cust-))
		CUST_LIST_MAX=${#CUST_LIST[@]}
		SELECT=$CUST_LIST_MAX
		ITER=0
		
		while [ $SELECT -lt 0 ] || [ $SELECT -ge $CUST_LIST_MAX ] ; do
		
			if [ $ITER -ne 0 ]; then
				pl
				pr "Error: Your choice is invalid!\n"
				pl
			fi 
		
			COUNT=0
			while [ $COUNT -lt $CUST_LIST_MAX ]; do
				pn "[$((COUNT + 1))] ${CUST_LIST[$COUNT]}"
				COUNT=$((COUNT + 1))
			done
		
			read -n 1 -s SELECT
			SELECT=$((SELECT - 1))
			ITER=$((ITER + 1))
		done
		CUST=${CUST_LIST[$SELECT]}
	fi

	## SITE

	pl
	pgn "Create new customer site in database? [y, N] (alternatively use existing)"
	read -n1 -s SELECT
	pl
	if [ "x$SELECT" == "xY" ] || [ "x$SELECT" == "xy" ]; then
		pgn "Specify customer site name : [site-]"
		read SITE
		SITE=site-$SITE

		if [ "x$SITE" == "x" ]; then
			pl
			pr "Empty customer site cannot be created"
			pl
			continue
		fi

		if [ -d $S3_SOURCE/$CUST/$SITE ]; then
			pl
			pr "Customer site cannot be created, it already exists ($SITE)"
			pl
			continue
		fi
	else
	
		SITE_LIST=($(ls $S3_SOURCE/$CUST | grep site-))
		SITE_LIST_MAX=${#SITE_LIST[@]}
		SELECT=$SITE_LIST_MAX
		ITER=0
		
		while [ $SELECT -lt 0 ] || [ $SELECT -ge $SITE_LIST_MAX ]; do
		
			if [ $ITER -ne 0 ]; then
				pl
				pr "Error: Your choice is invalid!\n"
				pl
			fi 
		
			COUNT=0
			while [ $COUNT -lt $SITE_LIST_MAX ]; do
				pn "[$((COUNT + 1))] ${SITE_LIST[$COUNT]}"
				COUNT=$((COUNT + 1))
			done
		
			read -n 1 -s SELECT
			SELECT=$((SELECT - 1))
			ITER=$((ITER + 1))
		done
		SITE=${SITE_LIST[$SELECT]}
	fi

	## CONFIRM

	pl
	pg "You have selected the following details:"
	pl
	pnn "- Customer selected : "
	pg $CUST
	pnn "- Site selected : "
	pg $SITE
	pl
	pr "Do you want to go ahead ?"
	pl
	pnn "Type 'ok' and Enter to continue : "
	read SELECT
	
	if [ "x$SELECT" != "xok" ]; then
		pl
		pr "Add aborted"
		exit 1
	fi


	echo "[$(date)] Add/Modify Creating [$CUST, $SITE]" >> $LOG

	pl
	pnn "- Creating directory structure : "
	mkdir -p $S3_SOURCE/$CUST/$SITE/payload
	echo "Empty payload area" > $S3_SOURCE/$CUST/$SITE/payload/README
	mkdir -p $S3_SOURCE/$CUST/$SITE/settings
	
	run tar xvzf $CPWD/firmware/settings.tar.gz -C $S3_SOURCE/$CUST/$SITE/settings

	pg "DONE"

	pl
	pg "Customer/Site update complete."
	pl
	pg "Please update the files under : $CUST/$SITE/settings/"
	pl
	pnn "Press any key to continue"
	read -n1 -s SELECT

	## MORE ?

	pl
	pg "Add another customer or site [y, N]"
	read -n1 -s SELECT
	if [ "x$SELECT" == "x" ] || [ "x$SELECT" == "xN" ] || [ "x$SELECT" == "xn" ]; then
		ADD_NEXT=false
	fi
done

