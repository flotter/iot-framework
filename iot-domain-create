#!/bin/bash -e

CPWD="$( cd "$(dirname "$0")" ; pwd -P )"

#----------------------------------------------------#
# COMMON ATTRIBUTES                                  #
#----------------------------------------------------#

source $CPWD/scripts/iot-utils

#----------------------------------------------------#
# DEFINES / MACROS                                   #
#----------------------------------------------------#

LOG=$MASTER_DB/iot-domain-create.log

#----------------------------------------------------#
# CMDLINE OPTIONS                                    #
#----------------------------------------------------#

ARGC=$#
ARGV=("$@")

VERBOSE=false
HELP=false

# Clear args
set --

COUNT=0
while [ $COUNT -lt $ARGC ]; do
	STRIP=${ARGV[COUNT]}

	ID=0
	LONGFORMAT=`echo $STRIP | cut -b 1-2`
	if [ "x$LONGFORMAT" == "x--" ]; then
		STRIP=`echo ${ARGV[COUNT]} | cut -b 2-3`
	else
		ID=`echo $STRIP | cut -b 3-`
		STRIP=`echo $STRIP | cut -b 1-2`
	fi
	

	if [ "x$STRIP" == "x-v" ]; then
		VERBOSE=true
	elif [ "x$STRIP" == "x-h" ]; then
		HELP=true
	else
		pl
		pr "Error: Unknown argument"
		COUNT=$ARGC
		HELP=true
	fi
COUNT=$((COUNT+1))
done

log "Started"

pl
pg "iot-domain-create ($VERSION)"

if [ "$HELP" == "true" ]; then
        pl
	pn "Usage:"
	pl
        pn "Add new customers and customer sites. This creates a new"
        pn "operational domain for devices, with its own settings and"
        pn "payload."
        pl
	pn "iot-domain-create [-v] [-h] ..."
	pl
	pn "Help:"
	pl
	pn "-v (--verbose)     Verbose output for operations"
	pn "-h (--help)        Print this"
	pl
	exit 1
fi

#----------------------------------------------------#
# PREPARE                                            #
#----------------------------------------------------#

pn
pg ":: Setup & Checks ::"
pn

common_setup

log "Common Setup OK"

pnn "- Admin permissions enabled : "
admin_check
pg "Yes"

log "Admin OK"

#----------------------------------------------------#
# BODY                                               #
#----------------------------------------------------#

pl
pg ":: Add Domain Confirmation ::"
pl
pnn "Type 'ok' and Enter to continue : "
read SELECT

if [ "x$SELECT" != "xok" ]; then
	err "User aborted."
fi

log "Confirmation granted"

pl
pg ":: Add Domain ::"
pl

pn "A domain consists of a Customer ID and a Site ID. It is"
pn "possible for multiple Site IDs to be associated with a"
pn "single Customer ID, not the other way around. Do you"
pn "want to create a new Customer ID first, or do you want"
pn "to add a new Site ID to an existing Customer ID?"
pl

pnn "Create new Customer ID? [y, N] "
read -n1 -s SELECT
pl

if [ "x$SELECT" == "xY" ] || [ "x$SELECT" == "xy" ]; then
	log "Creating Customer ID"   

	pnn "Specify Customer ID : cust-"
	read CUST
	CUST=cust-$CUST

	if [ "x$CUST" == "xcust-" ]; then
		err "Empty Customer ID suffix is not allowed"
	fi

	if [ -d $MASTER_DB/$CUST ]; then
		err "Customer ID cannot be created, it already exists ($CUST)"
	fi
else
	log "Selecting Customer ID"   

	mkdir -p $MASTER_DB
	CUST_LIST=($(ls $MASTER_DB | grep cust- || true))
	CUST_LIST_MAX=${#CUST_LIST[@]}
	SELECT=$CUST_LIST_MAX
	ITER=0
	
	while [ $SELECT -lt 0 ] || [ $SELECT -ge $CUST_LIST_MAX ] ; do
                
		if [ $CUST_LIST_MAX -eq 0 ]; then
			break
                fi
	
		if [ $ITER -ne 0 ]; then
			pl
			pr "Error: Your choice is invalid!"
			pl
		fi 
	
		pn "Please select the Customer ID from the list:"
		COUNT=0
		while [ $COUNT -lt $CUST_LIST_MAX ]; do
			pn "[$(printf "%2d" $((COUNT + 1)))] ${CUST_LIST[$COUNT]}"
			COUNT=$((COUNT + 1))
		done
	
		pl
		pnn "Choice? : "
		read SELECT
		SELECT=$((SELECT - 1))
		ITER=$((ITER + 1))
	done
	CUST=${CUST_LIST[$SELECT]}
fi
		
if [ -z "$CUST" ]; then
	err "No valid Customer ID found! Please create a new Customer ID"
fi 

pl
pn "If you select an existing Site ID, all the settings for"
pn "the domain will be reset to defaults. Note that default"
pn "settings (and payload) is not sufficient and requires"
pn "manually tweaking some details (e.g. WIFI details)."
pl

pnn "Create new Site ID? [y, N] "
read -n1 -s SELECT
pl

if [ "x$SELECT" == "xY" ] || [ "x$SELECT" == "xy" ]; then
	log "Creating Site ID"   

	pnn "Specify Site ID : site-"
	read SITE
	SITE=site-$SITE

	if [ "x$SITE" == "xsite-" ]; then
		err "Empty Site ID suffix is not allowed"
	fi

	if [ -d $MASTER_DB/$CUST/$SITE ]; then
		err "Site ID cannot be created, it already exists ($SITE)"
	fi
else
	log "Selecting Site ID"   
	mkdir -p $MASTER_DB/$CUST
	SITE_LIST=($(ls $MASTER_DB/$CUST | grep site- || true))
	SITE_LIST_MAX=${#SITE_LIST[@]}
	SELECT=$SITE_LIST_MAX
	ITER=0

	while [ $SELECT -lt 0 ] || [ $SELECT -ge $SITE_LIST_MAX ]; do

                if [ $SITE_LIST_MAX -eq 0 ]; then
			break
                fi
	
		if [ $ITER -ne 0 ]; then
			pl
			pr "Error: Your choice is invalid!"
			pl
		fi 
	
		pn "Please select the Site ID from the list:"
		COUNT=0
		while [ $COUNT -lt $SITE_LIST_MAX ]; do
			pn "[$(printf "%2d" $((COUNT + 1)))] ${SITE_LIST[$COUNT]}"
			COUNT=$((COUNT + 1))
		done

		pl	
		pnn "Choice? : "
		read SELECT
		SELECT=$((SELECT - 1))
		ITER=$((ITER + 1))
	done
	SITE=${SITE_LIST[$SELECT]}
fi

if [ -z "$SITE" ]; then
	err "No valid Site ID found! Please create a new Site ID"
fi 

pl
pg ":: Final Confirmation ::"
pl

if [ -d $MASTER_DB/$CUST/$SITE ]; then
	pn "The following domain already exist and will be reset:"

	log "Domain exist and will be reset"
else
	pn "The following domain will be created:"

	log "Domain will be created"
fi

pl
pnn "Customer ID : "
pg $CUST
pnn "Site ID : "
pg $SITE
pl
pnn "Type 'ok' and Enter to continue : "
read SELECT

if [ "x$SELECT" != "xok" ]; then
	err "User aborted."
fi

log "Adding or Resetting Customer ID: $CUST, Site ID: $SITE"

pl
pg ":: Performing Actions ::"
pl

pnn "- Creating domain directory structure : "
mkdir -p $MASTER_DB/$CUST/$SITE/payload
mkdir -p $MASTER_DB/$CUST/$SITE/settings
pg "Done"

pnn "- Copying default settings : "
run tar xvzf $IOT_DEVICE_DIR/settings.tar.gz -C $MASTER_DB/$CUST/$SITE/settings
pg "Done"

pnn "- Copying default payload : "
run tar xvzf $IOT_DEVICE_DIR/payload.tar.gz -C $MASTER_DB/$CUST/$SITE/payload
pg "Done"

pl
